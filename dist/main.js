(()=>{"use strict";(()=>{const t=[{name:"any"}],e=[];let n=[];class o{constructor(t,n,o,c,r){this.title=t,this.description=n,this.dueDate=o,this.priority=c,this.notes=r,this.project="any",e.push({...this})}}class c{constructor(e){this.name=e,t.push(this)}}function r(e,o){const c=document.querySelector("#root"),r=document.createElement("div");r.classList.add("toDoCard");const i=document.createElement("h2");i.innerText=`${todo.title}`,r.appendChild(i);const d=document.createElement("p");d.innerText=`description: ${todo.description}`,r.appendChild(d);const s=document.createElement("p");s.innerText=`Due date: ${todo.dueDate}`,r.appendChild(s);const p=document.createElement("p");p.innerText=`Priority: ${todo.priority}`,r.appendChild(p);const l=document.createElement("p");l.innerText=`notes: ${todo.notes}`,r.appendChild(l);const u=document.createElement("form"),m=document.createElement("label");m.setAttribute("for","projects"),m.innerText="choose project: ";const h=document.createElement("select");h.setAttribute("name","projects"),h.setAttribute("id","projects"),h.classList.add("select"),e.forEach((t=>{const e=document.createElement("option");e.classList.add("option"),e.setAttribute("value",`${t.name}`),e.innerText=`${t.name}`,h.appendChild(e)})),u.onchange=function(e){e.preventDefault();const c=e.target.value;todo.project=c;const r=o.findIndex((t=>t.title===todo.title));o[r]=todo,n=o,a(t,n)},u.appendChild(m),u.appendChild(h),r.appendChild(u),c.appendChild(r)}function a(t,e){const n=document.querySelector(".projectsContainer");n&&n.remove();const o=document.createElement("div");if(o.classList.add("projectsContainer"),t.length>0){function c(t){t.preventDefault;let n=t.target.getAttribute("project-name");e.filter((t=>t.project===n)),r()}t.forEach((t=>{const e=document.createElement("button");e.innerText=t.name,e.classList.add("projectBtn"),e.addEventListener("click",c),e.setAttribute("project-name",t.name),o.appendChild(e)}))}document.querySelector("#root").appendChild(o)}new o("watarfo","watarfo","watarfo","watarfo","watarfo"),new o("watarfo2","watarfo2","watarfo2","watarfo2","watarfo2"),new c("proyecto 1"),new c("proyecto 2"),r(t,e),a(t,e)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,