(()=>{"use strict";const e=function(){function e(){let e=document.querySelectorAll(".form");console.log(e),e.length>0&&e.forEach((e=>{e.remove()}))}return{projectForm:function(){e();let t=document.createElement("form");t.classList.add("form");let n=document.createElement("input");n.setAttribute("id","project-name"),n.setAttribute("type","text"),n.setAttribute("name","project");let o=document.createElement("label");o.setAttribute("for","project-name"),o.innerText="Project name: ";let i=document.createElement("input");return i.setAttribute("type","submit"),i.innerText="Submit Project",t.appendChild(o),t.appendChild(n),t.appendChild(i),t},toDoForm:function(){e();let t=document.createElement("form");t.classList.add("form");let n=document.createElement("div"),o=document.createElement("label");o.setAttribute("for","title"),o.innerText="Title: ";let i=document.createElement("input");i.setAttribute("type","text"),i.setAttribute("name","title"),i.setAttribute("id","title"),i.setAttribute("required",!0),n.appendChild(o),n.appendChild(i);let r=document.createElement("div"),c=document.createElement("select");c.setAttribute("id","select");let d=document.createElement("label");d.setAttribute("for","select"),d.innerText="Priority: ";let l=document.createElement("option");l.setAttribute("value","Low"),l.setAttribute("name","low"),l.setAttribute("selected",!0),l.setAttribute("required",!0),l.innerText="Low";let a=document.createElement("option");a.setAttribute("value","Mid"),a.setAttribute("name","mid"),a.setAttribute("required",!0),a.innerText="Mid";let s=document.createElement("option");s.setAttribute("value","High"),s.setAttribute("name","priority"),s.setAttribute("required",!0),s.innerText="High",r.appendChild(d),r.appendChild(c),c.appendChild(l),c.appendChild(a),c.appendChild(s),c.setAttribute("name","priority");let p=document.createElement("div"),m=document.createElement("label");m.setAttribute("for","description"),m.innerText="Description: ";let u=document.createElement("input");u.setAttribute("type","text"),u.setAttribute("name","description"),u.setAttribute("id","description"),p.appendChild(m),p.appendChild(u);let h=document.createElement("div"),b=document.createElement("label");b.setAttribute("for","date"),b.innerText="Due date: ";let E=document.createElement("input");E.setAttribute("type","date"),E.setAttribute("id","date"),E.setAttribute("name","date"),E.required=!0,h.appendChild(b),h.appendChild(E),document.createElement("div");let C=document.createElement("div");return t.appendChild(n),t.appendChild(r),t.appendChild(p),t.appendChild(h),t.appendChild(C),t}}}();(()=>{class t{constructor(e,t="no description",n,o,i="any"){this.title=e,this.description=t,this.dueDate=n,this.priority=o,this.project=i,this.any="any"}localStorageSet(){const e=JSON.parse(localStorage.getItem("todos"))||[];e.push({...this}),localStorage.setItem("todos",JSON.stringify(e))}removeFromLs(){const e=JSON.parse(localStorage.getItem("todos"))||[],t=c.indexOf(this);t>-1&&(e.splice(t,1),localStorage.setItem("todos",JSON.stringify(e)))}}class n{constructor(e){this.name=e,r.push(this)}}let o=JSON.parse(localStorage.getItem("todos"))||[];console.log(o);let i=[];o.length>0&&o.forEach((e=>{let n=Object.assign(new t,e);i.push(n)}));const r=[],c=i||[];let d=i||[];const l=document.createElement("section");l.classList.add("projectsSection"),root.appendChild(l);const a=document.createElement("section");a.classList.add("navBar");const s=document.createElement("button");s.innerText="NEW PROJECT",s.setAttribute("name","newProject"),s.onclick=m;const p=document.createElement("button");function m(o){if(o.preventDefault,"newProject"===o.target.getAttribute("name")){let t=e.projectForm();t.onsubmit=e=>{e.preventDefault();let o=t.elements.project.value;new n(o),b(r,c),h(r,c)},root.appendChild(t)}else{let n=e.toDoForm();const o=document.createElement("div"),i=document.createElement("label");i.innerText="Project ";const d=document.createElement("select");d.setAttribute("name","project"),r.forEach((e=>{let t=document.createElement("option");t.innerText=`${e.name}`,d.appendChild(t)}));const l=document.createElement("input");l.setAttribute("type","submit"),l.innerText="Add To-Do",n.appendChild(o),o.appendChild(i),o.appendChild(d),n.appendChild(l),root.appendChild(n),n.onsubmit=e=>{e.preventDefault();let o=n.elements.date.value,i=n.elements.title.value,d=n.elements.description.value,l=n.elements.priority.value,a=n.elements.project.value,s=new t(i,d,o,l,a);s.localStorageSet(),c.push(s),h(r,c)}}}p.setAttribute("name","newToDo"),p.innerText="NEW TO-DO",p.onclick=m,a.appendChild(s),a.appendChild(p),root.appendChild(a);const u=document.createElement("section");function h(e,t){document.querySelector("#root");const n=document.querySelector(".toDoArticle");n&&n.remove();const o=document.createElement("article");o.classList.add("toDoArticle"),t.forEach((n=>{const i=document.createElement("div");i.classList.add("toDoCard");const r=document.createElement("h2");r.innerText=`${n.title}`,i.appendChild(r);const c=document.createElement("p");c.innerText=`Due date: ${n.dueDate}`,i.appendChild(c);const l=document.createElement("button");if(l.innerText="Remove To-Do",l.onclick=()=>{i.remove(),n.removeFromLs()},i.appendChild(l),"any"!==n.project){const e=document.createElement("p");e.classList.add("project"),e.innerText=`Assigned project: ${n.project}`,i.appendChild(e)}!function e(){const t=document.createElement("button");t.classList.add("details"),t.innerText="Details",t.onclick=function(){i.appendChild(a),i.appendChild(s),p.appendChild(m),p.appendChild(b);document.querySelector(".details").remove();const t=document.createElement("button");t.innerText="Go Back",i.appendChild(t),t.onclick=()=>{document.querySelector(".project").remove(),s.remove(),m.remove(),b.remove(),t.remove(),e()}},i.appendChild(t)}();const a=document.createElement("p");""!==n.description?a.innerText=`description: ${n.description}`:a.innerText="No description";const s=document.createElement("p");s.innerText=`Priority: ${n.priority}`;const p=document.createElement("form"),m=document.createElement("label");m.setAttribute("for","projects"),m.innerText="choose project: ";const b=document.createElement("select");b.setAttribute("name","projects"),b.setAttribute("id","projects"),b.classList.add("select");const E=document.createElement("option");E.classList.add("option"),E.setAttribute("value","any"),E.innerText="Any",b.appendChild(E),e.forEach((e=>{const t=document.createElement("option");t.classList.add("option"),t.setAttribute("value",`${e.name}`),t.innerText=`${e.name}`,b.appendChild(t)})),p.onchange=function(o){const i=o.target.value;if(n.project=i,d){const o=d.findIndex((e=>e.title===n.title));t[o]=n,d=t,h(e,d)}const r=t.findIndex((e=>e.title===n.title));t[r]=n,d=t},i.appendChild(p),o.appendChild(i),u.appendChild(o)}))}function b(e,t){const n=document.querySelector(".projectsContainer");n&&n.remove();const o=document.createElement("div");o.classList.add("projectsContainer");const i=document.createElement("button");if(i.innerText="Any",i.classList.add("projectBtn"),i.setAttribute("any","any"),i.addEventListener("click",(()=>{let e=t.filter((e=>"any"===e.any));h(r,e)})),o.appendChild(i),e.length>0){function c(e){e.preventDefault;let n=e.target.getAttribute("project-name"),o=t.filter((e=>e.project===n));h(r,o)}e.forEach((e=>{const t=document.createElement("button");t.innerText=e.name,t.classList.add("projectBtn"),t.addEventListener("click",c),t.setAttribute("project-name",e.name),o.appendChild(t)}))}l.appendChild(o)}u.classList.add("toDosSection"),root.appendChild(u),b(r,c),h(r,c)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QnhDLEVBQUVFLE9BQU9DLGFBQWEsZ0JBRXZDbUMsRUFBZTFELEVBQU0yRCxRQUFTTixHQUN2QkEsRUFBR25FLFVBQVkwRSxJQUUxQmhDLEVBQVd2QixFQUFlcUQsRUFDMUIsQ0F0QkFyQixFQUFTekYsU0FBUXNDLElBR2IsTUFBTTJFLEVBQWF0SCxTQUFTUyxjQUFjLFVBQzFDNkcsRUFBV3ZHLFVBQVk0QixFQUFRa0IsS0FDL0J5RCxFQUFXNUcsVUFBVUMsSUFBSSxjQUN6QjJHLEVBQVdKLGlCQUFpQixRQUFTdkMsR0FFckMyQyxFQUFXekcsYUFBYSxlQUFnQjhCLEVBQVFrQixNQUdoRG1ELEVBQWtCL0YsWUFBWXFHLEVBQVUsR0FhaEQsQ0FJQWhELEVBQWdCckQsWUFBWStGLEVBR2hDLENBalFBbkIsRUFBZW5GLFVBQVVDLElBQUksZ0JBQzdCNEQsS0FBS3RELFlBQVk0RSxHQUVqQlQsRUFBZXRCLEVBQWVMLEdBRTlCNEIsRUFBV3ZCLEVBQWVMLEVBNFAxQixFQy9aSjhELEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvbGlzdC8uL3NyYy9mb3Jtcy5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL3NyYy90b2RvLmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBmb3JtcyA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gY2hlY2tJZkl0RXhpc3RzKCkge1xuICAgIGxldCBwcmV2aW91c0Zvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZm9ybScpO1xuICAgIGNvbnNvbGUubG9nKHByZXZpb3VzRm9ybSlcbiAgICBpZiAocHJldmlvdXNGb3JtLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcHJldmlvdXNGb3JtLmZvckVhY2goKGZvcm0pID0+IHtcbiAgICAgICAgICAgIGZvcm0ucmVtb3ZlKCk7XG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgIH0gXG4gIH07XG4gICAgZnVuY3Rpb24gY3JlYXRlUHJvamVjdEZvcm0oKSB7XG4gICAgICAvLyBDcmVhdGUgYW5kIHJldHVybiB0aGUgSFRNTCBmb3IgdGhlIHByb2plY3QgZm9ybVxuICAgICAgY2hlY2tJZkl0RXhpc3RzKCk7XG4gICAgICBsZXQgcHJvamVjdEZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gICAgICBwcm9qZWN0Rm9ybS5jbGFzc0xpc3QuYWRkKCdmb3JtJyk7XG4gICAgICBcbiAgICAgIGxldCBwcm9qZWN0TmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICBwcm9qZWN0TmFtZS5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3Byb2plY3QtbmFtZScpO1xuICAgICAgcHJvamVjdE5hbWUuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQnKTtcbiAgICAgIHByb2plY3ROYW1lLnNldEF0dHJpYnV0ZSgnbmFtZScsICdwcm9qZWN0JylcbiAgICAgIFxuICAgICAgbGV0IHByb2plY3ROYW1lTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgICAgcHJvamVjdE5hbWVMYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsICdwcm9qZWN0LW5hbWUnKTtcbiAgICAgIHByb2plY3ROYW1lTGFiZWwuaW5uZXJUZXh0ID0gJ1Byb2plY3QgbmFtZTogJ1xuXG4gICAgICBsZXQgc3VibWl0UHJvamVjdEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICBzdWJtaXRQcm9qZWN0QnRuLnNldEF0dHJpYnV0ZSgndHlwZScsICdzdWJtaXQnKTtcbiAgICAgIHN1Ym1pdFByb2plY3RCdG4uaW5uZXJUZXh0ID0gJ1N1Ym1pdCBQcm9qZWN0JztcblxuXG4gICAgICBwcm9qZWN0Rm9ybS5hcHBlbmRDaGlsZChwcm9qZWN0TmFtZUxhYmVsKTtcbiAgICAgIHByb2plY3RGb3JtLmFwcGVuZENoaWxkKHByb2plY3ROYW1lKTtcbiAgICAgIHByb2plY3RGb3JtLmFwcGVuZENoaWxkKHN1Ym1pdFByb2plY3RCdG4pXG4gICAgICBcbiAgICAgICAgXG4gICAgICByZXR1cm4gcHJvamVjdEZvcm07XG4gICAgfVxuICBcbiAgICBmdW5jdGlvbiBjcmVhdGVUb0RvRm9ybSgpIHtcbiAgICAgIC8vIENyZWF0ZSBhbmQgcmV0dXJuIHRoZSBIVE1MIGZvciB0aGUgdG8tZG8gZm9ybVxuICAgICAgY2hlY2tJZkl0RXhpc3RzKCk7XG4gICAgICBsZXQgdG9kb0Zvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gICAgICB0b2RvRm9ybS5jbGFzc0xpc3QuYWRkKCdmb3JtJylcbiAgICAgIC8qIHRpdGxlIGlucHV0OiAqL1xuICAgICAgbGV0IGRpdlRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBsZXQgZGl2VGl0bGVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICBkaXZUaXRsZUxhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgJ3RpdGxlJyk7XG4gICAgICBkaXZUaXRsZUxhYmVsLmlubmVyVGV4dCA9ICdUaXRsZTogJztcbiAgICAgIGxldCBkaXZUaXRsZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgIGRpdlRpdGxlSW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQnKTtcbiAgICAgIGRpdlRpdGxlSW5wdXQuc2V0QXR0cmlidXRlKCduYW1lJywgJ3RpdGxlJyk7XG4gICAgICBkaXZUaXRsZUlucHV0LnNldEF0dHJpYnV0ZSgnaWQnLCAndGl0bGUnKTtcbiAgICAgIGRpdlRpdGxlSW5wdXQuc2V0QXR0cmlidXRlKCdyZXF1aXJlZCcsIHRydWUpO1xuICAgICAgXG4gICAgICBkaXZUaXRsZS5hcHBlbmRDaGlsZChkaXZUaXRsZUxhYmVsKTtcbiAgICAgIGRpdlRpdGxlLmFwcGVuZENoaWxkKGRpdlRpdGxlSW5wdXQpO1xuICAgICAgLyogcHJpb3JpdHkgaW5wdXQ6ICovXG4gICAgICBsZXQgZGl2UHJpb3JpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGxldCBzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcbiAgICAgIHNlbGVjdC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3NlbGVjdCcpXG4gICAgICBsZXQgZGl2UHJpb3JpdHlMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICBkaXZQcmlvcml0eUxhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgJ3NlbGVjdCcpO1xuICAgICAgZGl2UHJpb3JpdHlMYWJlbC5pbm5lclRleHQgPSAnUHJpb3JpdHk6ICc7XG4gICAgICAgICAgLyogb3B0aW9ucyAqL1xuICAgICAgbGV0IGRpdlByaW9yaXR5TG93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICBkaXZQcmlvcml0eUxvdy5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgJ0xvdycpO1xuICAgICAgZGl2UHJpb3JpdHlMb3cuc2V0QXR0cmlidXRlKCduYW1lJywgJ2xvdycpO1xuICAgICAgZGl2UHJpb3JpdHlMb3cuc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsIHRydWUpO1xuICAgICAgZGl2UHJpb3JpdHlMb3cuc2V0QXR0cmlidXRlKCdyZXF1aXJlZCcsIHRydWUpO1xuICAgICAgZGl2UHJpb3JpdHlMb3cuaW5uZXJUZXh0ID0gJ0xvdyc7XG5cbiAgICAgIGxldCBkaXZQcmlvcml0eU1pZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgZGl2UHJpb3JpdHlNaWQuc2V0QXR0cmlidXRlKCd2YWx1ZScsICdNaWQnKTtcbiAgICAgIGRpdlByaW9yaXR5TWlkLnNldEF0dHJpYnV0ZSgnbmFtZScsICdtaWQnKTtcbiAgICAgIGRpdlByaW9yaXR5TWlkLnNldEF0dHJpYnV0ZSgncmVxdWlyZWQnLCB0cnVlKTtcbiAgICAgIGRpdlByaW9yaXR5TWlkLmlubmVyVGV4dCA9ICdNaWQnO1xuICAgICBcbiAgICAgIGxldCBkaXZQcmlvcml0eUhpZ2ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgIGRpdlByaW9yaXR5SGlnaC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgJ0hpZ2gnKTtcbiAgICAgIGRpdlByaW9yaXR5SGlnaC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCAncHJpb3JpdHknKTtcbiAgICAgIGRpdlByaW9yaXR5SGlnaC5zZXRBdHRyaWJ1dGUoJ3JlcXVpcmVkJywgdHJ1ZSk7XG4gICAgICBkaXZQcmlvcml0eUhpZ2guaW5uZXJUZXh0ID0gJ0hpZ2gnO1xuICAgICAgXG4gICAgICBkaXZQcmlvcml0eS5hcHBlbmRDaGlsZChkaXZQcmlvcml0eUxhYmVsKTtcbiAgICAgIGRpdlByaW9yaXR5LmFwcGVuZENoaWxkKHNlbGVjdCk7XG4gICAgICBzZWxlY3QuYXBwZW5kQ2hpbGQoZGl2UHJpb3JpdHlMb3cpO1xuICAgICAgc2VsZWN0LmFwcGVuZENoaWxkKGRpdlByaW9yaXR5TWlkKTtcbiAgICAgIHNlbGVjdC5hcHBlbmRDaGlsZChkaXZQcmlvcml0eUhpZ2gpO1xuICAgICAgc2VsZWN0LnNldEF0dHJpYnV0ZSgnbmFtZScsICdwcmlvcml0eScpXG5cbiAgICAgIC8qIGRlc2NyaXB0aW9uIGlucHV0ICovXG4gICAgICBsZXQgZGl2RGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGxldCBkaXZEZXNjcmlwdGlvbkxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgIGRpdkRlc2NyaXB0aW9uTGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCAnZGVzY3JpcHRpb24nKTtcbiAgICAgIGRpdkRlc2NyaXB0aW9uTGFiZWwuaW5uZXJUZXh0ID0gJ0Rlc2NyaXB0aW9uOiAnO1xuICAgICAgbGV0IGRpdkRlc2NyaXB0aW9uSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgZGl2RGVzY3JpcHRpb25JbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dCcpO1xuICAgICAgZGl2RGVzY3JpcHRpb25JbnB1dC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCAnZGVzY3JpcHRpb24nKTtcbiAgICAgIGRpdkRlc2NyaXB0aW9uSW5wdXQuc2V0QXR0cmlidXRlKCdpZCcsICdkZXNjcmlwdGlvbicpO1xuICAgICAgXG4gICAgICBkaXZEZXNjcmlwdGlvbi5hcHBlbmRDaGlsZChkaXZEZXNjcmlwdGlvbkxhYmVsKTtcbiAgICAgIGRpdkRlc2NyaXB0aW9uLmFwcGVuZENoaWxkKGRpdkRlc2NyaXB0aW9uSW5wdXQpO1xuXG4gICAgICAvKiBEdWUgZGF0ZSBpbnB1dCAqL1xuICAgICAgbGV0IGRpdkRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGxldCBkaXZEYXRlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgICAgZGl2RGF0ZUxhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgJ2RhdGUnKVxuICAgICAgZGl2RGF0ZUxhYmVsLmlubmVyVGV4dCA9ICdEdWUgZGF0ZTogJ1xuICAgICAgbGV0IGRpdkRhdGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICBkaXZEYXRlSW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2RhdGUnKTtcbiAgICAgIGRpdkRhdGVJbnB1dC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2RhdGUnKTtcbiAgICAgIGRpdkRhdGVJbnB1dC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCAnZGF0ZScpO1xuICAgICAgZGl2RGF0ZUlucHV0LnJlcXVpcmVkID0gdHJ1ZTtcblxuICAgICAgZGl2RGF0ZS5hcHBlbmRDaGlsZChkaXZEYXRlTGFiZWwpO1xuICAgICAgZGl2RGF0ZS5hcHBlbmRDaGlsZChkaXZEYXRlSW5wdXQpO1xuXG5cbiAgICAgIFxuXG4gICAgICBcbiAgICAgIFxuICAgICAgXG4gICAgICBsZXQgZGl2Tm90ZXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGxldCBkaXZQcm9qZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0b2RvRm9ybS5hcHBlbmRDaGlsZChkaXZUaXRsZSk7XG4gICAgICB0b2RvRm9ybS5hcHBlbmRDaGlsZChkaXZQcmlvcml0eSk7XG4gICAgICB0b2RvRm9ybS5hcHBlbmRDaGlsZChkaXZEZXNjcmlwdGlvbik7XG4gICAgICB0b2RvRm9ybS5hcHBlbmRDaGlsZChkaXZEYXRlKTtcbiAgICAgIHRvZG9Gb3JtLmFwcGVuZENoaWxkKGRpdlByb2plY3QpO1xuICAgICAgcmV0dXJuIHRvZG9Gb3JtO1xuICAgIH1cbiAgXG4gICAgLy8gRXhwb3NlIHRoZSBmdW5jdGlvbnMgeW91IHdhbnQgdG8gbWFrZSBwdWJsaWNcbiAgICByZXR1cm4ge1xuICAgICAgcHJvamVjdEZvcm06IGNyZWF0ZVByb2plY3RGb3JtLFxuICAgICAgdG9Eb0Zvcm06IGNyZWF0ZVRvRG9Gb3JtLFxuICAgIH07XG4gIH0pKCk7IiwiXG5pbXBvcnQgeyBmb3JtcyB9IGZyb20gXCIuL2Zvcm1zXCI7XG5leHBvcnQgY29uc3QgZG9tTWFuaXB1bGF0aW9uID0gKCkgPT4ge1xuICAgIC8qIGNsYXNzZXMgKi9cbiAgICBjbGFzcyBUb2RvIHtcbiAgICAgICAgY29uc3RydWN0b3IodGl0bGUsIGRlc2NyaXB0aW9uPSdubyBkZXNjcmlwdGlvbicsIGR1ZURhdGUsIHByaW9yaXR5LCBwcm9qZWN0PSdhbnknKSB7XG4gICAgICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGUsXG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24sXG4gICAgICAgICAgICB0aGlzLmR1ZURhdGUgPSBkdWVEYXRlLFxuICAgICAgICAgICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5LFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0XG4gICAgICAgICAgICB0aGlzLmFueSA9ICdhbnknO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgIFxuICAgICAgICB9XG4gICAgICAgIGxvY2FsU3RvcmFnZVNldCgpIHtcbiAgICAgICAgICAgIC8vIFJldHJpZXZlIGV4aXN0aW5nIHRvZG9zIGZyb20gbG9jYWwgc3RvcmFnZVxuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdUb2RvcyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RvZG9zJykpIHx8IFtdO1xuICAgICAgICAgICAgLy8gQWRkIHRoZSBuZXcgdG9kbyB0byB0aGUgZXhpc3RpbmcgdG9kb3NcbiAgICAgICAgICAgIGV4aXN0aW5nVG9kb3MucHVzaCh7IC4uLnRoaXMgfSk7XG4gICAgICAgICAgICAvLyBTYXZlIHRoZSB1cGRhdGVkIHRvZG9zIGFycmF5IGJhY2sgdG8gbG9jYWwgc3RvcmFnZVxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RvZG9zJywgSlNPTi5zdHJpbmdpZnkoZXhpc3RpbmdUb2RvcykpO1xuICAgICAgICB9O1xuICAgICAgICByZW1vdmVGcm9tTHMoKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdUb2RvcyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RvZG9zJykpIHx8IFtdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCB0b0RvSW5kZXggPSB0b0Rvcy5pbmRleE9mKHRoaXMpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b0RvSW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdUb2Rvcy5zcGxpY2UodG9Eb0luZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2RvcycsIEpTT04uc3RyaW5naWZ5KGV4aXN0aW5nVG9kb3MpKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICB9XG4gICAgXG4gICAgICAgIGNsYXNzIFByb2plY3Qge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZVxuICAgICAgICAgICAgICAgIHByb2plY3RzQXJyYXkucHVzaCh0aGlzKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgIFxuICAgIH0gXG4gICAgLyogZ2xvYmFsIHZhcmlhYmxlcyAqL1xuICAgIGxldCB0b0Rvc0Zyb21McyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RvZG9zJykpIHx8IFtdO1xuICAgIGNvbnNvbGUubG9nKHRvRG9zRnJvbUxzKVxuICAgIGxldCBsc1RvRG9zV2l0aE1ldGhvZHMgPSBbXTtcbiAgICBpZiAodG9Eb3NGcm9tTHMubGVuZ3RoID4gMCkge1xuICAgICAgICB0b0Rvc0Zyb21Mcy5mb3JFYWNoKCh0b2RvKSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCB0b2RvRnJvbUxzID0gT2JqZWN0LmFzc2lnbihuZXcgVG9kbygpLCB0b2RvICk7XG4gICAgICAgICAgICBsc1RvRG9zV2l0aE1ldGhvZHMucHVzaCh0b2RvRnJvbUxzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIFxuICAgIGNvbnN0IHByb2plY3RzQXJyYXkgPSBbXSBcbiAgICBjb25zdCB0b0RvcyA9IGxzVG9Eb3NXaXRoTWV0aG9kcyB8fCBbXTtcbiAgICBsZXQgdG9Eb3NVcGRhdGVkID0gbHNUb0Rvc1dpdGhNZXRob2RzIHx8IFtdO1xuICAgXG4gICBcbiAgICBcbiAgICAvKiBET00gc3RhdGljIHNlY3Rpb25zICovXG4gICAgXG5cbiAgICBjb25zdCBwcm9qZWN0c1NlY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWN0aW9uJyk7XG4gICAgcHJvamVjdHNTZWN0aW9uLmNsYXNzTGlzdC5hZGQoJ3Byb2plY3RzU2VjdGlvbicpO1xuICAgIHJvb3QuYXBwZW5kQ2hpbGQocHJvamVjdHNTZWN0aW9uKVxuXG4gICAgY29uc3QgbmF2QmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VjdGlvbicpO1xuICAgIG5hdkJhci5jbGFzc0xpc3QuYWRkKCduYXZCYXInKTtcbiAgICBjb25zdCBuZXdQcm9qZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgbmV3UHJvamVjdC5pbm5lclRleHQgPSAnTkVXIFBST0pFQ1QnO1xuICAgIG5ld1Byb2plY3Quc2V0QXR0cmlidXRlKCduYW1lJywgJ25ld1Byb2plY3QnKTtcbiAgICBuZXdQcm9qZWN0Lm9uY2xpY2sgPSBoYW5kbGVDbGljaztcblxuICAgIGNvbnN0IG5ld1RvRG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBuZXdUb0RvLnNldEF0dHJpYnV0ZSgnbmFtZScsICduZXdUb0RvJyk7XG4gICAgbmV3VG9Eby5pbm5lclRleHQgPSAnTkVXIFRPLURPJztcbiAgICBuZXdUb0RvLm9uY2xpY2sgPSBoYW5kbGVDbGljaztcblxuICAgIG5hdkJhci5hcHBlbmRDaGlsZChuZXdQcm9qZWN0KTtcbiAgICBuYXZCYXIuYXBwZW5kQ2hpbGQobmV3VG9Ebyk7XG4gICAgcm9vdC5hcHBlbmRDaGlsZChuYXZCYXIpO1xuXG4gICAgXG4gICAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0XG4gICAgICAgIGxldCBjbGlja2VkID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCduYW1lJyk7XG4gICAgICAgIFxuICAgICAgICBpZiAoY2xpY2tlZCA9PT0gJ25ld1Byb2plY3QnKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCBwcm9qZWN0Rm9ybSA9IGZvcm1zLnByb2plY3RGb3JtKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHByb2plY3RGb3JtLm9uc3VibWl0ID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgbGV0IHByb2plY3ROYW1lID0gcHJvamVjdEZvcm0uZWxlbWVudHNbXCJwcm9qZWN0XCJdLnZhbHVlO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1Byb2plY3QgPSBuZXcgUHJvamVjdChwcm9qZWN0TmFtZSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmVuZGVyUHJvamVjdHMocHJvamVjdHNBcnJheSwgdG9Eb3MpOyBcbiAgICAgICAgICAgICAgICByZW5kZXJUb0RvKHByb2plY3RzQXJyYXksIHRvRG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJvb3QuYXBwZW5kQ2hpbGQocHJvamVjdEZvcm0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgdG9kb0Zvcm0gPSBmb3Jtcy50b0RvRm9ybSgpO1xuICAgICAgICAgICAgLyogc2VsZWN0IHByb2plY3QgKi9cbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RTZWxlY3REaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RTZWxlY3RMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgICAgICBwcm9qZWN0U2VsZWN0TGFiZWwuaW5uZXJUZXh0ID0gXCJQcm9qZWN0IFwiXG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0U2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XG4gICAgICAgICAgICBwcm9qZWN0U2VsZWN0LnNldEF0dHJpYnV0ZSgnbmFtZScsICdwcm9qZWN0JylcbiAgICAgICAgICAgIHByb2plY3RzQXJyYXkuZm9yRWFjaCggKHByb2plY3QpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcHJvamVjdE9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgICAgICAgICAgIHByb2plY3RPcHRpb24uaW5uZXJUZXh0ID0gYCR7cHJvamVjdC5uYW1lfWBcbiAgICAgICAgICAgICAgICBwcm9qZWN0U2VsZWN0LmFwcGVuZENoaWxkKHByb2plY3RPcHRpb24pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGNvbnN0IHN1Ym1pdElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgIHN1Ym1pdElucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICdzdWJtaXQnKTtcbiAgICAgICAgICAgIHN1Ym1pdElucHV0LmlubmVyVGV4dCA9ICdBZGQgVG8tRG8nO1xuXG4gICAgICAgICAgICB0b2RvRm9ybS5hcHBlbmRDaGlsZChwcm9qZWN0U2VsZWN0RGl2KTtcbiAgICAgICAgICAgIHByb2plY3RTZWxlY3REaXYuYXBwZW5kQ2hpbGQocHJvamVjdFNlbGVjdExhYmVsKTtcbiAgICAgICAgICAgIHByb2plY3RTZWxlY3REaXYuYXBwZW5kQ2hpbGQocHJvamVjdFNlbGVjdCk7XG4gICAgICAgICAgICB0b2RvRm9ybS5hcHBlbmRDaGlsZChzdWJtaXRJbnB1dClcbiAgICAgICAgICAgIHJvb3QuYXBwZW5kQ2hpbGQodG9kb0Zvcm0pO1xuXG4gICAgICAgICAgICB0b2RvRm9ybS5vbnN1Ym1pdD0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgbGV0IGRhdGUgPSB0b2RvRm9ybS5lbGVtZW50c1tcImRhdGVcIl0udmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IHRpdGxlID0gdG9kb0Zvcm0uZWxlbWVudHNbXCJ0aXRsZVwiXS52YWx1ZTtcbiAgICAgICAgICAgICAgICBsZXQgZGVzY3JpcHRpb24gPSB0b2RvRm9ybS5lbGVtZW50c1tcImRlc2NyaXB0aW9uXCJdLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBwcmlvcml0eSA9IHRvZG9Gb3JtLmVsZW1lbnRzW1wicHJpb3JpdHlcIl0udmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IHByb2plY3QgPSB0b2RvRm9ybS5lbGVtZW50c1tcInByb2plY3RcIl0udmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IHN1Ym1pdHRlZFRvZG8gPSBuZXcgVG9kbyh0aXRsZSwgZGVzY3JpcHRpb24sIGRhdGUsIHByaW9yaXR5LCBwcm9qZWN0KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBzdWJtaXR0ZWRUb2RvLmxvY2FsU3RvcmFnZVNldCgpXG4gICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICB0b0Rvcy5wdXNoKHN1Ym1pdHRlZFRvZG8pO1xuXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmVuZGVyVG9Ebyhwcm9qZWN0c0FycmF5LCB0b0RvcylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBjb25zdCB0b0Rvc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlY3Rpb24nKTtcbiAgICB0b0Rvc0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd0b0Rvc1NlY3Rpb24nKVxuICAgIHJvb3QuYXBwZW5kQ2hpbGQodG9Eb3NDb250YWluZXIpXG5cbiAgICByZW5kZXJQcm9qZWN0cyhwcm9qZWN0c0FycmF5LCB0b0Rvcyk7XG4gICAgXG4gICAgcmVuZGVyVG9Ebyhwcm9qZWN0c0FycmF5LCB0b0Rvcyk7XG4gICAgXG5cbiAgICAvKiByZW5kZXIgYSB0b2RvIGl0ZW0gKi9cbiAgICBmdW5jdGlvbiByZW5kZXJUb0RvIChwcm9qZWN0cywgdG9Eb3MpIHtcbiAgICBcblxuICAgIFxuICAgIGNvbnN0IHJvb3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcm9vdCcpO1xuICAgXG4gICAgICAgIFxuICAgIGNvbnN0IHRvRG9zUHJldmlvdXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG9Eb0FydGljbGUnKTtcbiAgICBpZiAodG9Eb3NQcmV2aW91cykge1xuICAgICAgICB0b0Rvc1ByZXZpb3VzLnJlbW92ZSgpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICBjb25zdCB0b0RvQXJ0aWNsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2FydGljbGUnKTtcbiAgICB0b0RvQXJ0aWNsZS5jbGFzc0xpc3QuYWRkKCd0b0RvQXJ0aWNsZScpO1xuICAgIFxuICAgIHRvRG9zLmZvckVhY2goKHRvZG8pID0+IHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBjb25zdCB0b2RvQ2FyZENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0b2RvQ2FyZENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd0b0RvQ2FyZCcpO1xuICAgICAgICBcbiAgICBcbiAgICAgICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xuICAgICAgICB0aXRsZS5pbm5lclRleHQgPSBgJHt0b2RvLnRpdGxlfWBcbiAgICAgICAgdG9kb0NhcmRDb250YWluZXIuYXBwZW5kQ2hpbGQodGl0bGUpO1xuXG4gICAgICAgIGNvbnN0IGR1ZURhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgIGR1ZURhdGUuaW5uZXJUZXh0ID0gYER1ZSBkYXRlOiAke3RvZG8uZHVlRGF0ZX1gO1xuICAgICAgICB0b2RvQ2FyZENvbnRhaW5lci5hcHBlbmRDaGlsZChkdWVEYXRlKTtcblxuICAgICAgICBjb25zdCByZW1vdmVUb2RvQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgIHJlbW92ZVRvZG9CdG4uaW5uZXJUZXh0ID0gJ1JlbW92ZSBUby1Ebyc7XG4gICAgICAgIHJlbW92ZVRvZG9CdG4ub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIHRvZG9DYXJkQ29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgICAgICAgdG9kby5yZW1vdmVGcm9tTHMoKVxuICAgICAgICB9O1xuICAgICAgICB0b2RvQ2FyZENvbnRhaW5lci5hcHBlbmRDaGlsZChyZW1vdmVUb2RvQnRuKTtcblxuICAgICAgICBcblxuICAgICAgICBpZiAodG9kby5wcm9qZWN0ICE9PSAnYW55Jykge1xuICAgICAgICAgICAgY29uc3QgcHJvamVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgIHByb2plY3QuY2xhc3NMaXN0LmFkZCgncHJvamVjdCcpXG4gICAgICAgICAgICBwcm9qZWN0LmlubmVyVGV4dCA9IGBBc3NpZ25lZCBwcm9qZWN0OiAke3RvZG8ucHJvamVjdH1gO1xuICAgICAgICAgICAgdG9kb0NhcmRDb250YWluZXIuYXBwZW5kQ2hpbGQocHJvamVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG5cblxuICAgICAgICAoZnVuY3Rpb24gY3JlYXRlRGV0YWlsQnRuICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGRldGFpbHNCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgIGRldGFpbHNCdG4uY2xhc3NMaXN0LmFkZCgnZGV0YWlscycpXG4gICAgICAgICAgICBkZXRhaWxzQnRuLmlubmVyVGV4dCA9ICdEZXRhaWxzJztcbiAgICAgICAgICAgIGRldGFpbHNCdG4ub25jbGljayA9IGRldGFpbENsaWNrSGFuZGxlcjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdG9kb0NhcmRDb250YWluZXIuYXBwZW5kQ2hpbGQoZGV0YWlsc0J0bik7XG4gICAgICAgICAgICBmdW5jdGlvbiBkZXRhaWxDbGlja0hhbmRsZXIoKSB7XG4gICAgICAgICAgICAgICAgdG9kb0NhcmRDb250YWluZXIuYXBwZW5kQ2hpbGQoZGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgIHRvZG9DYXJkQ29udGFpbmVyLmFwcGVuZENoaWxkKHByaW9yaXR5KTtcbiAgICAgICAgICAgICAgICBwcm9qZWN0Rm9ybS5hcHBlbmRDaGlsZChzZWxlY3RMYWJlbCk7XG4gICAgICAgICAgICAgICAgcHJvamVjdEZvcm0uYXBwZW5kQ2hpbGQocHJvamVjdFNlbGVjdCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGV0YWlsc0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kZXRhaWxzJyk7XG4gICAgICAgICAgICAgICAgZGV0YWlsc0J0bi5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB1bmRldGFpbGVkQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICAgICAgdW5kZXRhaWxlZEJ0bi5pbm5lclRleHQgPSAnR28gQmFjayc7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdG9kb0NhcmRDb250YWluZXIuYXBwZW5kQ2hpbGQodW5kZXRhaWxlZEJ0bik7XG5cbiAgICAgICAgICAgICAgICB1bmRldGFpbGVkQnRuLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwcm9qZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QnKTtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHkucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdExhYmVsLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0U2VsZWN0LnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICB1bmRldGFpbGVkQnRuLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVEZXRhaWxCdG4oKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgaWYgKHRvZG8uZGVzY3JpcHRpb24gIT09ICcnKSB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbi5pbm5lclRleHQgPSBgZGVzY3JpcHRpb246ICR7dG9kby5kZXNjcmlwdGlvbn1gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVzY3JpcHRpb24uaW5uZXJUZXh0ID0nTm8gZGVzY3JpcHRpb24nXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgIFxuICAgICAgICBcbiAgICBcbiAgICAgICAgY29uc3QgcHJpb3JpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgIHByaW9yaXR5LmlubmVyVGV4dCA9IGBQcmlvcml0eTogJHt0b2RvLnByaW9yaXR5fWA7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgXG4gICAgICAgIFxuICAgIFxuICAgICAgICBjb25zdCBwcm9qZWN0Rm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgICAgICAgXG4gICAgXG4gICAgICAgIGNvbnN0IHNlbGVjdExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgc2VsZWN0TGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCAncHJvamVjdHMnKTtcbiAgICAgICAgc2VsZWN0TGFiZWwuaW5uZXJUZXh0ID0gJ2Nob29zZSBwcm9qZWN0OiAnXG4gICAgICAgIFxuICAgICAgICBjb25zdCBwcm9qZWN0U2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XG4gICAgICAgIHByb2plY3RTZWxlY3Quc2V0QXR0cmlidXRlKCduYW1lJywgJ3Byb2plY3RzJyk7XG4gICAgICAgIHByb2plY3RTZWxlY3Quc2V0QXR0cmlidXRlKCdpZCcsICdwcm9qZWN0cycpO1xuICAgICAgICBwcm9qZWN0U2VsZWN0LmNsYXNzTGlzdC5hZGQoJ3NlbGVjdCcpXG4gICAgICAgIGNvbnN0IGFueU9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgICBhbnlPcHRpb24uY2xhc3NMaXN0LmFkZCgnb3B0aW9uJyk7XG4gICAgICAgIGFueU9wdGlvbi5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgJ2FueScpO1xuICAgICAgICBhbnlPcHRpb24uaW5uZXJUZXh0ID0gYCR7J0FueSd9YFxuICAgICAgICBwcm9qZWN0U2VsZWN0LmFwcGVuZENoaWxkKGFueU9wdGlvbilcbiAgICAgICAgcHJvamVjdHMuZm9yRWFjaChwcm9qZWN0ID0+IHtcbiAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgICAgIG9wdGlvbi5jbGFzc0xpc3QuYWRkKGBvcHRpb25gKTtcbiAgICAgICAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgYCR7cHJvamVjdC5uYW1lfWApO1xuICAgICAgICAgICAgb3B0aW9uLmlubmVyVGV4dCA9IGAke3Byb2plY3QubmFtZX1gXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcHJvamVjdFNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgcHJvamVjdEZvcm0ub25jaGFuZ2UgPSBoYW5kbGVDaGFuZ2U7XG4gICAgICAgIFxuICAgICAgICB0b2RvQ2FyZENvbnRhaW5lci5hcHBlbmRDaGlsZChwcm9qZWN0Rm9ybSk7XG4gICAgICAgIFxuXG4gICAgICAgIFxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UgKGUpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAvKiByZXRyaWV2ZXMgdGhlIHZhbHVlIG9mIHRoZSBvcHRpb24gc2VsZWN0ZWQgKi9cbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkUHJvamVjdCA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAvKiBhc3NpZ25zIHRoYXQgdmFsdWUgdG8gdGhlIHByb2plY3QgcHJvcGVydHkgb2YgdGhlIHRvZG8gKi9cbiAgICAgICAgICAgIHRvZG8ucHJvamVjdCA9IHNlbGVjdGVkUHJvamVjdDtcbiAgICAgICAgICAgIC8qIGZpbmRzIHRoYXQgdG9kbyBpbiB0aGUgdG9kb3MgYXJyYXkqL1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodG9Eb3NVcGRhdGVkKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgaW5BcnJheSA9IHRvRG9zVXBkYXRlZC5maW5kSW5kZXgoKGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbC50aXRsZSA9PT0gdG9kby50aXRsZVxuICAgICAgICAgICAgICAgIH0pICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0b0Rvc1tpbkFycmF5XSA9IHRvZG87XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0b0Rvc1VwZGF0ZWQgPSB0b0RvcztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgIHJlbmRlclRvRG8ocHJvamVjdHMsIHRvRG9zVXBkYXRlZCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpbkFycmF5ID0gdG9Eb3MuZmluZEluZGV4KChlbCkgPT4ge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBlbC50aXRsZSA9PT0gdG9kby50aXRsZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHRvRG9zW2luQXJyYXldID0gdG9kbztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdG9Eb3NVcGRhdGVkID0gdG9Eb3M7XG4gICAgICAgICAgICBcblxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIHRvRG9BcnRpY2xlLmFwcGVuZENoaWxkKHRvZG9DYXJkQ29udGFpbmVyKTtcbiAgICAgICAgXG4gICAgICAgIHRvRG9zQ29udGFpbmVyLmFwcGVuZENoaWxkKHRvRG9BcnRpY2xlKVxuICAgICAgICBcbiAgICB9KVxuICAgICBcbn1cbiAgICAvKiBwcm9qZWN0IHJlbmRlcmluZyAqL1xuICAgIGZ1bmN0aW9uIHJlbmRlclByb2plY3RzKHByb2plY3RzLCB0b0Rvcykge1xuICAgICAgICBcbiAgICAgICAgLyogY2hlY2sgaWYgcHJvamVjdHMgYWxyZWFkeSBleGlzdHMsIGFuZCByZW1vdmUgaXQqL1xuICAgICAgICBjb25zdCBwcmV2aW91c0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0c0NvbnRhaW5lcicpXG4gICAgICAgIGlmKHByZXZpb3VzQ29udGFpbmVyKSB7XG4gICAgICAgICAgICBwcmV2aW91c0NvbnRhaW5lci5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBpZiBpdCBkb2VzbnQgZXhpc3QsIGNyZWF0ZSBpdCAqL1xuICAgICAgICBjb25zdCBwcm9qZWN0c0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBwcm9qZWN0c0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0c0NvbnRhaW5lcicpO1xuICAgICAgICAvKiByZW5kZXIgYW55IGJ1dHRvbiAqL1xuICAgICAgICBjb25zdCBhbnlCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgYW55QnRuLmlubmVyVGV4dCA9ICdBbnknO1xuICAgICAgICBhbnlCdG4uY2xhc3NMaXN0LmFkZCgncHJvamVjdEJ0bicpO1xuICAgICAgICBhbnlCdG4uc2V0QXR0cmlidXRlKCdhbnknLCAnYW55JylcbiAgICAgICAgYW55QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHByb2plY3RUb0RvcyA9IHRvRG9zLmZpbHRlciggKGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsLmFueSA9PT0gJ2FueSdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlbmRlclRvRG8ocHJvamVjdHNBcnJheSwgcHJvamVjdFRvRG9zKVxuICAgICAgICB9KVxuICAgICAgICBwcm9qZWN0c0NvbnRhaW5lci5hcHBlbmRDaGlsZChhbnlCdG4pXG4gICAgICAgIC8qIHJlbmRlciBlYWNoIHByb2plY3QgYXMgYSBidXR0b24sIGlmIHRoZXJlJ3MgbW9yZSB0aGFuIDAqL1xuICAgICAgICBpZiAocHJvamVjdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcHJvamVjdHMuZm9yRWFjaChwcm9qZWN0ID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvamVjdEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICAgICAgICAgIHByb2plY3RCdG4uaW5uZXJUZXh0ID0gcHJvamVjdC5uYW1lO1xuICAgICAgICAgICAgICAgIHByb2plY3RCdG4uY2xhc3NMaXN0LmFkZCgncHJvamVjdEJ0bicpO1xuICAgICAgICAgICAgICAgIHByb2plY3RCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVDbGljayk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcHJvamVjdEJ0bi5zZXRBdHRyaWJ1dGUoJ3Byb2plY3QtbmFtZScsIHByb2plY3QubmFtZSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAgICAgICAgIHByb2plY3RzQ29udGFpbmVyLmFwcGVuZENoaWxkKHByb2plY3RCdG4pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8qIGV2ZW50IGxpc3RlbmVyLCByZW5kZXJzIGV2ZXJ5IGVsZW1lbnQgdGhhdCBjb3JyZXNwb25kcyB3aXRoIHRoZSBwcm9qZWN0IGNsaWNrZWQqL1xuICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soZSl7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0XG4gICAgICAgICAgICBsZXQgcHJvamVjdENsaWNrZWQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ3Byb2plY3QtbmFtZScpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgcHJvamVjdFRvRG9zID0gdG9Eb3MuZmlsdGVyKCAoZWwpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWwucHJvamVjdCA9PT0gcHJvamVjdENsaWNrZWQgXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcmVuZGVyVG9Ebyhwcm9qZWN0c0FycmF5LCBwcm9qZWN0VG9Eb3MpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICBcbiAgICAgICAgXG4gICAgICAgIHByb2plY3RzU2VjdGlvbi5hcHBlbmRDaGlsZChwcm9qZWN0c0NvbnRhaW5lcilcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICB9XG4gICAgXG5cblxuIiwiaW1wb3J0IHsgZG9tTWFuaXB1bGF0aW9uIH0gZnJvbSBcIi4vdG9kb1wiO1xuXG5kb21NYW5pcHVsYXRpb24oKTtcblxuXG5cblxuXG5cblxuXG5cbiJdLCJuYW1lcyI6WyJjaGVja0lmSXRFeGlzdHMiLCJwcmV2aW91c0Zvcm0iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjb25zb2xlIiwibG9nIiwibGVuZ3RoIiwiZm9yRWFjaCIsImZvcm0iLCJyZW1vdmUiLCJwcm9qZWN0Rm9ybSIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJwcm9qZWN0TmFtZSIsInNldEF0dHJpYnV0ZSIsInByb2plY3ROYW1lTGFiZWwiLCJpbm5lclRleHQiLCJzdWJtaXRQcm9qZWN0QnRuIiwiYXBwZW5kQ2hpbGQiLCJ0b0RvRm9ybSIsInRvZG9Gb3JtIiwiZGl2VGl0bGUiLCJkaXZUaXRsZUxhYmVsIiwiZGl2VGl0bGVJbnB1dCIsImRpdlByaW9yaXR5Iiwic2VsZWN0IiwiZGl2UHJpb3JpdHlMYWJlbCIsImRpdlByaW9yaXR5TG93IiwiZGl2UHJpb3JpdHlNaWQiLCJkaXZQcmlvcml0eUhpZ2giLCJkaXZEZXNjcmlwdGlvbiIsImRpdkRlc2NyaXB0aW9uTGFiZWwiLCJkaXZEZXNjcmlwdGlvbklucHV0IiwiZGl2RGF0ZSIsImRpdkRhdGVMYWJlbCIsImRpdkRhdGVJbnB1dCIsInJlcXVpcmVkIiwiZGl2UHJvamVjdCIsIlRvZG8iLCJjb25zdHJ1Y3RvciIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJwcm9qZWN0IiwidGhpcyIsImFueSIsImxvY2FsU3RvcmFnZVNldCIsImV4aXN0aW5nVG9kb3MiLCJKU09OIiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicHVzaCIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJyZW1vdmVGcm9tTHMiLCJ0b0RvSW5kZXgiLCJ0b0RvcyIsImluZGV4T2YiLCJzcGxpY2UiLCJQcm9qZWN0IiwibmFtZSIsInByb2plY3RzQXJyYXkiLCJ0b0Rvc0Zyb21McyIsImxzVG9Eb3NXaXRoTWV0aG9kcyIsInRvZG8iLCJ0b2RvRnJvbUxzIiwiT2JqZWN0IiwiYXNzaWduIiwidG9Eb3NVcGRhdGVkIiwicHJvamVjdHNTZWN0aW9uIiwicm9vdCIsIm5hdkJhciIsIm5ld1Byb2plY3QiLCJvbmNsaWNrIiwiaGFuZGxlQ2xpY2siLCJuZXdUb0RvIiwiZSIsInByZXZlbnREZWZhdWx0IiwidGFyZ2V0IiwiZ2V0QXR0cmlidXRlIiwib25zdWJtaXQiLCJlbGVtZW50cyIsInZhbHVlIiwicmVuZGVyUHJvamVjdHMiLCJyZW5kZXJUb0RvIiwicHJvamVjdFNlbGVjdERpdiIsInByb2plY3RTZWxlY3RMYWJlbCIsInByb2plY3RTZWxlY3QiLCJwcm9qZWN0T3B0aW9uIiwic3VibWl0SW5wdXQiLCJkYXRlIiwic3VibWl0dGVkVG9kbyIsInRvRG9zQ29udGFpbmVyIiwicHJvamVjdHMiLCJxdWVyeVNlbGVjdG9yIiwidG9Eb3NQcmV2aW91cyIsInRvRG9BcnRpY2xlIiwidG9kb0NhcmRDb250YWluZXIiLCJyZW1vdmVUb2RvQnRuIiwiY3JlYXRlRGV0YWlsQnRuIiwiZGV0YWlsc0J0biIsInNlbGVjdExhYmVsIiwidW5kZXRhaWxlZEJ0biIsImFueU9wdGlvbiIsIm9wdGlvbiIsIm9uY2hhbmdlIiwic2VsZWN0ZWRQcm9qZWN0IiwiaW5BcnJheSIsImZpbmRJbmRleCIsImVsIiwicHJldmlvdXNDb250YWluZXIiLCJwcm9qZWN0c0NvbnRhaW5lciIsImFueUJ0biIsImFkZEV2ZW50TGlzdGVuZXIiLCJwcm9qZWN0VG9Eb3MiLCJmaWx0ZXIiLCJwcm9qZWN0Q2xpY2tlZCIsInByb2plY3RCdG4iLCJkb21NYW5pcHVsYXRpb24iXSwic291cmNlUm9vdCI6IiJ9